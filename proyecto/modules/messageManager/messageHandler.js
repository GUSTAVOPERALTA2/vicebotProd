// File: modules/messageManager/messageHandler.js

const { handleCommands }             = require('./commandsHandler');
const { handleIncidence }            = require('../../modules/incidenceManager/incidenceHandler');
const {
  requestFeedback,
  handleTeamResponse,
  handleOriginResponse
}                                      = require('../../modules/incidenceManager/feedbackProcessor');
const { processConfirmation }         = require('../../modules/incidenceManager/confirmationProcessor');
const { processCancelationNewMethod } = require('../../modules/incidenceManager/cancelationProcessor');
const { extractIdentifier }           = require('../../modules/incidenceManager/identifierExtractor');
const incidenceDB                     = require('../../modules/incidenceManager/incidenceDB');
const { normalizeText }               = require('../../config/stringUtils');
const { getUser }                     = require('../../config/userManager');

async function handleMessage(client, message) {
  try {
    const chat    = await message.getChat();
    const isGroup = chat.isGroup;

    console.log('\n‚Äì‚Äì handleMessage recibido ‚Äì‚Äì');
    console.log('  ‚Ä¢ from:',         message.from);
    console.log('  ‚Ä¢ isGroup:',      isGroup);
    console.log('  ‚Ä¢ body:',         message.body);
    console.log('  ‚Ä¢ hasQuotedMsg:', message.hasQuotedMsg);

    // =======================================
    // 1) ‚ÄúDM + cita‚Äù A CUALQUIER MENSAJE CITADO
    //    ‚Üí extraer incidencia con extractIdentifier
    //    ‚Üí decidir acci√≥n: cancelar / confirmar / pedir feedback
    // =======================================
    if (!isGroup && message.hasQuotedMsg) {
      const quoted    = await message.getQuotedMessage();
      const rawQuoted = quoted.body
        .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
        .replace(/\*/g, '')
        .toLowerCase()
        .trim();

      console.log('  ‚Üí [DM + cita] rawQuoted:', JSON.stringify(rawQuoted));
      const normQuoted = normalizeText(rawQuoted);
      console.log('  ‚Üí [DM + cita] normQuoted:', JSON.stringify(normQuoted));

      // Extraer ID con el nuevo extractor (identificador √∫nico u originalMsgId)
      const incidenciaId = await extractIdentifier(quoted);
      console.log('    ‚Ä¢ [DM + cita] extractIdentifier devolvi√≥:', incidenciaId);

      if (incidenciaId && /^\d+$/.test(incidenciaId)) {
        // 1.A) Determinar si la respuesta contiene palabra/frase de CANCELACI√ìN
        const responseText   = normalizeText(message.body);
        const responseTokens = new Set(responseText.split(/\s+/));
        const cancelKW       = client.keywordsData.cancelacion || {};
        const isCancelWord   = (cancelKW.palabras || []).some(w => responseTokens.has(normalizeText(w)));
        const isCancelPhrase = (cancelKW.frases   || []).some(f => responseText.includes(normalizeText(f)));

        if (isCancelWord || isCancelPhrase) {
          console.log('    ‚Ä¢ DM + cita ‚Üí CANCELACI√ìN detectada para ID', incidenciaId);
          // Cancelaci√≥n directa usando incidenceDB
          incidenceDB.cancelarIncidencia(incidenciaId, async err => {
            if (err) {
              console.error('‚ùå Error cancelando incidencia:', err);
              await chat.sendMessage(`‚ùå No se pudo cancelar la incidencia ID ${incidenciaId}.`);
            } else {
              // Obtener nombre y cargo desde users.json
              const sender = message.author || message.from;
              const user   = getUser(sender);
              const who    = user ? `${user.nombre}(${user.cargo})` : sender;
              await chat.sendMessage(`ü§ñ‚úÖ  La incidencia ID: ${incidenciaId} ha sido cancelada por ${who}`);
            }
          });
          return;
        }

        // 1.B) Determinar si la respuesta contiene palabra/frase de CONFIRMACI√ìN
        const confirmKW       = client.keywordsData.respuestas.confirmacion || {};
        const isConfirmWord   = (confirmKW.palabras || []).some(w => responseTokens.has(normalizeText(w)));
        const isConfirmPhrase = (confirmKW.frases   || []).some(f => responseText.includes(normalizeText(f)));
        if (isConfirmWord || isConfirmPhrase) {
          console.log('    ‚Ä¢ DM + cita ‚Üí CONFIRMACI√ìN detectada para ID', incidenciaId);
          await processConfirmation(client, message);
          return;
        }

        // 1.C) Cualquier otro texto ‚Üí SOLICITAR FEEDBACK
        console.log('    ‚Ä¢ DM + cita ‚Üí SOLICITAR FEEDBACK para ID', incidenciaId);
        await requestFeedback(client, message);
        return;
      }

      console.log('    ‚úñÔ∏è DM + cita NO extrajo ID ‚Üí seguir flujo normal');
    }

    // =======================================
    // 2) Cancelaciones gen√©ricas (comando /cancelarTarea o keywords de cancelaci√≥n)
    // =======================================
    if (await processCancelationNewMethod(client, message)) {
      console.log('  ‚Üí processCancelationNewMethod DETECT√ì cancelaci√≥n gen√©rica');
      return;
    }

    // =======================================
    // 3) ‚ÄúGrupo + cita‚Äù A CUALQUIER MENSAJE CITADO
    //    ‚Üí extraer incidenciaId con extractIdentifier
    //    ‚Üí decidir acci√≥n: cancelar / confirmar / feedback de equipo
    // =======================================
    if (isGroup && message.hasQuotedMsg) {
      const quoted    = await message.getQuotedMessage();
      const rawQuoted = quoted.body
        .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
        .replace(/\*/g, '')
        .toLowerCase()
        .trim();

      console.log('  ‚Üí [Grupo + cita] rawQuoted:', JSON.stringify(rawQuoted));
      const normQuoted = normalizeText(rawQuoted);
      console.log('  ‚Üí [Grupo + cita] normQuoted:', JSON.stringify(normQuoted));

      // Extraer ID con el nuevo extractor (identificador √∫nico u originalMsgId)
      const incidenciaId = await extractIdentifier(quoted);
      console.log('  ‚Üí [Grupo + cita] extractIdentifier devolvi√≥:', incidenciaId);

      if (incidenciaId && /^\d+$/.test(incidenciaId)) {
        const responseText   = normalizeText(message.body);
        const responseTokens = new Set(responseText.split(/\s+/));

        // 3.A) ¬øCancela?
        const cancelKW3       = client.keywordsData.cancelacion || {};
        const isCancelWord3   = (cancelKW3.palabras || []).some(w => responseTokens.has(normalizeText(w)));
        const isCancelPhrase3 = (cancelKW3.frases   || []).some(f => responseText.includes(normalizeText(f)));
        if (isCancelWord3 || isCancelPhrase3) {
          console.log('    ‚Ä¢ Grupo + cita ‚Üí CANCELACI√ìN detectada para ID', incidenciaId);
          incidenceDB.cancelarIncidencia(incidenciaId, async err => {
            if (err) {
              console.error('‚ùå Error cancelando desde grupo:', err);
              await chat.sendMessage(`‚ùå No se pudo cancelar la incidencia ID ${incidenciaId}.`);
            } else {
              // Obtener nombre y cargo desde users.json
              const sender = message.author || message.from;
              const user   = getUser(sender);
              const who    = user ? `${user.nombre}(${user.cargo})` : sender;
              await chat.sendMessage(`ü§ñ‚úÖ  *La incidencia ID: ${incidenciaId} ha sido cancelada por ${who}*`);
            }
          });
          return;
        }

        // 3.B) ¬øConfirma?
        const confirmKW3       = client.keywordsData.respuestas.confirmacion || {};
        const isConfirmWord3   = (confirmKW3.palabras || []).some(w => responseTokens.has(normalizeText(w)));
        const isConfirmPhrase3 = (confirmKW3.frases || []).some(f => responseText.includes(normalizeText(f)));
        if (isConfirmWord3 || isConfirmPhrase3) {
          console.log('    ‚Ä¢ Grupo + cita ‚Üí CONFIRMACI√ìN detectada para ID', incidenciaId);
          await processConfirmation(client, message);
          return;
        }

        // 3.C) Feedback de equipo
        console.log('    ‚Ä¢ Grupo + cita ‚Üí FEEDBACK DE EQUIPO para ID', incidenciaId);
        await handleTeamResponse(client, message);
        return;
      }

      console.log('    ‚úñÔ∏è Grupo + cita NO extrajo ID v√°lido ‚Üí seguir flujo normal');
    }

    // =======================================
    // 4) Comandos (DM o grupo)
    // =======================================
    if (message.body && message.body.trim().startsWith('/')) {
      console.log('  ‚Üí Comando detectado:', message.body.trim());
      if (await handleCommands(client, message)) {
        console.log('    ‚Ä¢ Comando fue manejado por handleCommands');
        return;
      }
    }

    // =======================================
    // 5) Incidencias nuevas o detalles sin cita
    // =======================================
    console.log('  ‚Üí Ninguna condici√≥n anterior, delegando a handleIncidence');
    await handleIncidence(client, message);

  } catch (err) {
    console.error('üî• Error en handleMessage:', err);
  }
}

module.exports = handleMessage;
